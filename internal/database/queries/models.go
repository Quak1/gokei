// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package queries

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type AccountType string

const (
	AccountTypeCredit AccountType = "credit"
	AccountTypeDebit  AccountType = "debit"
	AccountTypeCash   AccountType = "cash"
)

func (e *AccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountType(s)
	case string:
		*e = AccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountType: %T", src)
	}
	return nil
}

type NullAccountType struct {
	AccountType AccountType
	Valid       bool // Valid is true if AccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountType), nil
}

type Account struct {
	ID        int32
	CreatedAt time.Time
	UpdatedAt time.Time
	Type      AccountType
	Name      string
}

type Category struct {
	ID        int32
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Color     string
	Icon      string
}

type Transaction struct {
	ID         int32
	CreatedAt  time.Time
	UpdatedAt  time.Time
	Amount     int32
	AccountID  int32
	CategoryID int32
	Title      string
	Date       time.Time
	Attachment string
	Note       string
}
