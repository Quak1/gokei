// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transactions.sql

package queries

import (
	"context"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (account_id, amount, category_id, title, attachment, note) 
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, amount, account_id, category_id, title, date, attachment, note
`

type CreateTransactionParams struct {
	AccountID  int32
	Amount     int32
	CategoryID int32
	Title      string
	Attachment string
	Note       string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.AccountID,
		arg.Amount,
		arg.CategoryID,
		arg.Title,
		arg.Attachment,
		arg.Note,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Amount,
		&i.AccountID,
		&i.CategoryID,
		&i.Title,
		&i.Date,
		&i.Attachment,
		&i.Note,
	)
	return i, err
}

const getAllTransactions = `-- name: GetAllTransactions :many
SELECT id, created_at, updated_at, amount, account_id, category_id, title, date, attachment, note FROM transactions
`

func (q *Queries) GetAllTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getAllTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Amount,
			&i.AccountID,
			&i.CategoryID,
			&i.Title,
			&i.Date,
			&i.Attachment,
			&i.Note,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
