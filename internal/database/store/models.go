// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package store

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type AccountType string

const (
	AccountTypeCredit AccountType = "credit"
	AccountTypeDebit  AccountType = "debit"
	AccountTypeCash   AccountType = "cash"
)

func (e *AccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountType(s)
	case string:
		*e = AccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountType: %T", src)
	}
	return nil
}

type NullAccountType struct {
	AccountType AccountType `json:"account_type"`
	Valid       bool        `json:"valid"` // Valid is true if AccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountType), nil
}

type Account struct {
	ID           int32       `json:"id"`
	CreatedAt    time.Time   `json:"-"`
	UpdatedAt    time.Time   `json:"-"`
	Type         AccountType `json:"type"`
	Name         string      `json:"name"`
	BalanceCents int64       `json:"balance_cents"`
	Version      int32       `json:"-"`
}

type Category struct {
	ID        int32     `json:"id"`
	CreatedAt time.Time `json:"-"`
	UpdatedAt time.Time `json:"-"`
	Name      string    `json:"name"`
	Color     string    `json:"color"`
	Icon      string    `json:"icon"`
	Version   int32     `json:"-"`
}

type Transaction struct {
	ID          int32     `json:"id"`
	CreatedAt   time.Time `json:"-"`
	UpdatedAt   time.Time `json:"-"`
	AmountCents int64     `json:"amount_cents"`
	AccountID   int32     `json:"account_id"`
	CategoryID  int32     `json:"category_id"`
	Title       string    `json:"title"`
	Date        time.Time `json:"date"`
	Attachment  string    `json:"attachment"`
	Note        string    `json:"note"`
	Version     int32     `json:"-"`
}
