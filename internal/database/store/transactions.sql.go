// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transactions.sql

package store

import (
	"context"
	"database/sql"
	"time"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (account_id, amount_cents, category_id, title, attachment, note)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, amount_cents, account_id, category_id, title, date, attachment, note, version
`

type CreateTransactionParams struct {
	AccountID   int32  `json:"account_id"`
	AmountCents int64  `json:"amount_cents"`
	CategoryID  int32  `json:"category_id"`
	Title       string `json:"title"`
	Attachment  string `json:"attachment"`
	Note        string `json:"note"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.AccountID,
		arg.AmountCents,
		arg.CategoryID,
		arg.Title,
		arg.Attachment,
		arg.Note,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AmountCents,
		&i.AccountID,
		&i.CategoryID,
		&i.Title,
		&i.Date,
		&i.Attachment,
		&i.Note,
		&i.Version,
	)
	return i, err
}

const deleteTransactionByID = `-- name: DeleteTransactionByID :one
DELETE FROM transactions
WHERE id = $1
RETURNING id, created_at, updated_at, amount_cents, account_id, category_id, title, date, attachment, note, version
`

func (q *Queries) DeleteTransactionByID(ctx context.Context, id int32) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, deleteTransactionByID, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AmountCents,
		&i.AccountID,
		&i.CategoryID,
		&i.Title,
		&i.Date,
		&i.Attachment,
		&i.Note,
		&i.Version,
	)
	return i, err
}

const getAllTransactions = `-- name: GetAllTransactions :many
SELECT id, created_at, updated_at, amount_cents, account_id, category_id, title, date, attachment, note, version FROM transactions
`

func (q *Queries) GetAllTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getAllTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AmountCents,
			&i.AccountID,
			&i.CategoryID,
			&i.Title,
			&i.Date,
			&i.Attachment,
			&i.Note,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, created_at, updated_at, amount_cents, account_id, category_id, title, date, attachment, note, version FROM transactions
WHERE id = $1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id int32) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByID, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AmountCents,
		&i.AccountID,
		&i.CategoryID,
		&i.Title,
		&i.Date,
		&i.Attachment,
		&i.Note,
		&i.Version,
	)
	return i, err
}

const getTransactionsByAccountID = `-- name: GetTransactionsByAccountID :many
SELECT id, created_at, updated_at, amount_cents, account_id, category_id, title, date, attachment, note, version FROM transactions
WHERE account_id = $1
`

func (q *Queries) GetTransactionsByAccountID(ctx context.Context, accountID int32) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByAccountID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AmountCents,
			&i.AccountID,
			&i.CategoryID,
			&i.Title,
			&i.Date,
			&i.Attachment,
			&i.Note,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransactionById = `-- name: UpdateTransactionById :execresult
UPDATE transactions
SET amount_cents = $3, account_id = $4, category_id = $5, title = $6, date = $7, attachment = $8, note = $9, version = version + 1
WHERE id = $1 AND version = $2
`

type UpdateTransactionByIdParams struct {
	ID          int32     `json:"id"`
	Version     int32     `json:"-"`
	AmountCents int64     `json:"amount_cents"`
	AccountID   int32     `json:"account_id"`
	CategoryID  int32     `json:"category_id"`
	Title       string    `json:"title"`
	Date        time.Time `json:"date"`
	Attachment  string    `json:"attachment"`
	Note        string    `json:"note"`
}

func (q *Queries) UpdateTransactionById(ctx context.Context, arg UpdateTransactionByIdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTransactionById,
		arg.ID,
		arg.Version,
		arg.AmountCents,
		arg.AccountID,
		arg.CategoryID,
		arg.Title,
		arg.Date,
		arg.Attachment,
		arg.Note,
	)
}
